
function logout() {
    Swal.fire({
        html: [
            `<p class="text-center">`,
            `   <img style="height: 100px;" src='../assets/images/spinner.gif' />`,
            `</p>`,
        ].join("\n"),
        title: "Logging out...",
        timer: 3000,
        showConfirmButton: false,
    }).then(async () => {
        window.location.href = "../process/logout.php";
    });
}

var GENERATED_DATA = [];

function populateDocumentReportsTable(rows) {
    let tbody = DocumentReportsTable.querySelector('tbody');
    let content = "";

    if (rows.length) {
        rows.forEach(row => {
            let department = (row.receiver_type=='DEPARTMENT') 
                    ?   row.department 
                    :   row.user_department;

            let from = row.actor_department;
            let to   = (['SENT','FORWARDED'].includes(row.status)) ? department : "";

            content += [
                `<tr>`,
                `<td class="text-end" style="width: 180px;">${row.datetime}</td>`,
                `<td>`,
                `   <span class="badge text-bg-${STATUS_COLOR[row.status]}">${row.status}</span>`,
                `</td>`,                
                `<td>`,
                `   <span class="badge text-bg-${DOCTYPE_COLOR[row.document_type]}">${row.document_type}</span>`,
                `</td>`,
                `<td>${row.document_name}</td>`,
                `<td>${from}</td>`,
                `<td>${to}</td>`,
                `<td>[${row.actor}]: <pre>${row.remarks}</pre></td>`,
                `</tr>`,
            ].join("\n");
        });
    } else {
        content += `
            <tr><td colspan="8" class="text-center">No data found.</td></tr>
        `;
    }

    tbody.innerHTML = content;
}

function generatedBy(user) {
    let currentdate = new Date(); 
    let datetime = 
          `${currentdate.getDate()}`.padStart(2, '0') + "/"
        + `${(currentdate.getMonth()+1)}`.padStart(2, '0')  + "/" 
        + `${currentdate.getFullYear()}`.padStart(2, '0') + " "  
        + `${currentdate.getHours()}`.padStart(2, '0') + ":"  
        + `${currentdate.getMinutes()}`.padStart(2, '0') + ":" 
        + `${currentdate.getSeconds()}`.padStart(2, '0');

    return `Generated by: ${user.first_name} ${user.last_name} ${datetime}`;
}

function triggerTooltips() { 
    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
}
let table;
function displayReport({ rows, department, docxtype, start_date, end_date }) {
    if(table) table.destroy();

    populateDocumentReportsTable(rows);

    table = $('#DocumentReportsTable').DataTable({
        paging: false,
        scrollCollapse: true,
        scrollY: '35vh',
        dom: 'Bfrtip',
        buttons: [
            'excel', 'pdf', 'print'
        ]
    });
}

generate.onclick = async () => {
    let formData = new FormData();
        formData.append('doctype', doctype.value);
        formData.append('department_id', department_id.value);
        formData.append('from', from.value);
        formData.append('to', to.value);

    let response = await fetch('fetch-reports.php', {
        method: 'POST',
        body: formData
    });
    let { rows, department, docxtype, fromx, tox, status, message, user } = await response.json();

    if(status=="success") {
        displayReport({ rows, department, docxtype, fromx, tox });
    } else {
        download.style.display = 'none';
        Swal.fire({
            icon: 'error',
            title: message
        });
    }

}

triggerTooltips();